name: "HelixStudios"
sceneByURL:
  - action: scrapeXPath
    url:
      - https://www.helixstudios.com/video/
    scraper: sceneScraper

performerByURL:
  - action: scrapeXPath
    url:
      - https://www.helixstudios.com/model/
    scraper: performerScraper

movieByURL:
  - action: scrapeXPath
    url:
      - https://www.helixstudios.com/movie/
    scraper: movieScraper

xPathScrapers:
  sceneScraper:
    common:
      $info: //div[@class="text"]
    scene:
      Title: //div[@class="video-info"]/h1
      Date:
        selector: //div[@class="info-items"]/span[@class="info-item date"]/text()
        postProcess:
          - replace:
              - regex: "th|st|nd|rd"
                with:
              - regex: '(\d+)\sdays\sago'
                with: $1
              - regex: '^([a-zA-Z]+)\s(\d+)$'
                with: "$1 $2, 2021"
          - subtractDays: true
          - parseDate: Jan 2, 2006
      Details:
        selector: //div[contains(concat(' ',normalize-space(@class),' '),' description-content ')]/p/text()
        concat: "#LINEBREAK#"
        postProcess:
          - replace:
              - regex: "___.*"
                with:
              - regex: "#LINEBREAK#"
                with: "\n\n"
      Tags:
        Name: //div[@class="video-tags-wrapper"]/a/text()
      Performers:
        Name:
          selector: //div[@class="video-cast"]//a/@title
        URL:
          selector: //div[@class="video-cast"]//a/@href
          postProcess:
            - replace:
              - regex: '(.*)'
                with: "https://www.helixstudios.com$1"
      Image:
        selector: //video/@poster
      Studio:
        Name:
          fixed: Helix

  performerScraper:
    performer:
      Name: //div[contains(@class, "top")]/h1/text()
      Gender:
        fixed: Male
      Height:
        selector: //span[text()="Height"]/following-sibling::text()
        postProcess:
          - feetToCm: true
      Measurements:
        selector: //span[text()="Cock"]/following-sibling::text()
        postProcess:
          - replace:
              - regex: ^
                with: "0'"
          - replace:
              - regex: inch*
                with: "''"
          - feetToCm: true
      Weight:
        selector: //span[text()="Weight"]/following-sibling::text()
        postProcess:
          - replace:
              - regex: lbs
                with: ""
          - lbToKg: true
      HairColor:
        selector: //span[text()="Hair"]/following-sibling::text()
      EyeColor:
        selector: //span[text()="Eyes"]/following-sibling::text()
      Image: //div[@class="model-headshot-image-wrapper"]/img/@src
      Details:
        selector: //div[@class="description"]//p[*]
        concat: "\n\n"
        postProcess:
          - replace:
              - regex: $
                with: " "

  movieScraper:
    movie:
      Name: //div[@class="movie-header"]/h1/text()
      Duration: //span[@class="info-item duration"]/text()
      Date:
      Director: //span[@class="info-item director"]/text()
      Synopsis: //div[@class="description-content description"]/p/text()
      Studio:
        Name:
          fixed: Helix
      FrontImage: //a[contains(@href, 'front_xlarge')]/@href
      BackImage: //a[contains(@href, 'back_xlarge')]/@href
# Last Updated October 23, 2021
